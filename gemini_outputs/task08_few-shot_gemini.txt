Prompt:
Example:
Input: 'name,"last, first",age'
Output: ['name', 'last, first', 'age']

Improve the given CSV parser to handle quoted fields properly.

`def parse_csv_line(line):
    return line.split(',')  # Incomplete: doesn't handle quoted fields`

---

Model Output:
import csv
import io

def parse_csv_line(line):
    f = io.StringIO(line)
    reader = csv.reader(f)
    for row in reader:
        return row
    return []

# Example Usage (matches your example):
line = 'name,"last, first",age'
result = parse_csv_line(line)
print(f"Input: '{line}'")
print(f"Output: {result}")

# Additional test cases to demonstrate handling of quotes
line2 = '"field with, comma",another field'
result2 = parse_csv_line(line2)
print(f"Input: '{line2}'")
print(f"Output: {result2}")

line3 = 'field1,"quoted field with ""double quotes""",field3'
result3 = parse_csv_line(line3)
print(f"Input: '{line3}'")
print(f"Output: {result3}")

line4 = 'field1,,"empty quoted field",field4'
result4 = parse_csv_line(line4)
print(f"Input: '{line4}'")
print(f"Output: {result4}")

Explanation of the Improvement:

Import csv and io:

The csv module is Python's built-in library for working with CSV files and data. It handles the complexities of parsing CSV, including quoted fields.
The io module (specifically io.StringIO) allows us to treat a string as a file-like object, which is what the csv.reader expects as input.
Create a File-Like Object:

f = io.StringIO(line) creates an in-memory text buffer containing the input line.
Use csv.reader:

reader = csv.reader(f) creates a CSV reader object. By default, it is configured to recognize commas as delimiters and double quotes (") as quote characters. When it encounters a field enclosed in double quotes, it will treat any commas within those quotes as part of the field's value, not as separators.
Iterate and Return:

The csv.reader yields rows as lists of strings. Since we are parsing a single line, the for row in reader: loop will iterate at most once.
return row returns the parsed list of fields from the line.
return [] is included as a fallback in case the input line is empty, although csv.reader on an empty StringIO might just yield an empty list anyway.
Why this is better than line.split(','):

Handles Commas in Quoted Fields: The csv module correctly interprets commas within double-quoted fields as part of the field's data, not as delimiters.
Handles Double Quotes: It understands how double quotes are used to enclose fields and how they might be escaped (though the default behavior might need adjustment for specific CSV dialects with different escaping rules).
More Robust: Using the dedicated csv module makes the parsing more robust and less prone to errors when dealing with various CSV formats.
Configurable: The csv.reader can be configured with different delimiters, quote characters, escape characters, and other CSV dialects if your CSV files use a different format.