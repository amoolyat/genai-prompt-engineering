Prompt:
Convert the following Kotlin data class into a REST API using Ktor, with GET and POST endpoints.

`data class Product(val id: Int, val name: String, val price: Double)
// TODO: Create GET and POST endpoints using Ktor`

---

Model Output:
package com.example.plugins

import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.application.*
import io.ktor.server.plugins.contentnegotiation.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import kotlinx.serialization.Serializable
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicInteger

@Serializable
data class Product(val id: Int, val name: String, val price: Double)

// In-memory data store (replace with a database in a real application)
val products = ConcurrentHashMap<Int, Product>()
val nextId = AtomicInteger(1)

fun Application.configureRouting() {
    install(ContentNegotiation) {
        json()
    }

    routing {
        get("/products") {
            call.respond(HttpStatusCode.OK, products.values.toList())
        }

        get("/products/{id}") {
            val id = call.parameters["id"]?.toIntOrNull()
            if (id == null) {
                call.respond(HttpStatusCode.BadRequest, "Invalid product ID")
                return@get
            }
            val product = products[id]
            if (product == null) {
                call.respond(HttpStatusCode.NotFound, "Product not found")
            } else {
                call.respond(HttpStatusCode.OK, product)
            }
        }

        post("/products") {
            val product = try {
                call.receive<Product>()
            } catch (e: ContentTransformationException) {
                call.respond(HttpStatusCode.BadRequest, "Invalid product format")
                return@post
            }

            val newId = nextId.getAndIncrement()
            val newProduct = product.copy(id = newId)
            products[newId] = newProduct
            call.respond(HttpStatusCode.Created, newProduct)
        }
    }
}

Explanation:

Dependencies: Make sure you have the necessary Ktor dependencies in your build.gradle.kts file:

Kotlin

implementation("io.ktor.server:ktor-server-core-jvm:$ktor_version")
implementation("io.ktor.server:ktor-server-netty-jvm:$ktor_version") // Or your preferred server engine
implementation("io.ktor.server:ktor-server-content-negotiation-jvm:$ktor_version")
implementation("io.ktor.serialization:ktor-serialization-kotlinx-json-jvm:$ktor_version")
implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlin_serialization_version")
Replace $ktor_version and $kotlin_serialization_version with your project's versions.

@Serializable Annotation: The Product data class is annotated with @Serializable from kotlinx.serialization. This is crucial for Ktor's JSON content negotiation to automatically serialize and deserialize Product objects.

In-Memory Data Store:

products: A ConcurrentHashMap is used as a simple in-memory data store to hold the Product objects. In a real application, you would typically use a database.
nextId: An AtomicInteger is used to generate unique IDs for new products.
configureRouting() Function: This extension function on Application configures the Ktor routing.

install(ContentNegotiation): This installs the ContentNegotiation feature, allowing Ktor to automatically handle the conversion of request and response bodies to and from specific formats (in this case, JSON).
json(): Configures ContentNegotiation to use kotlinx.serialization.json for handling JSON.
routing { ... }: Defines the application's routes.
GET /products Endpoint:

get("/products") { ... }: Defines a GET route at the /products path.
call.respond(HttpStatusCode.OK, products.values.toList()): Retrieves all values (the Product objects) from the products map, converts them to a list, and responds with an HTTP 200 OK status code and the list of products as a JSON array in the response body.
GET /products/{id} Endpoint:

get("/products/{id}") { ... }: Defines a GET route with a path parameter {id}.
val id = call.parameters["id"]?.toIntOrNull(): Extracts the id parameter from the URL and attempts to convert it to an integer.
Error Handling:
If the id is null (not a valid integer), it responds with an HTTP 400 Bad Request status code and an error message.
val product = products[id]: Retrieves the Product from the products map using the provided id.
If the product is null (not found), it responds with an HTTP 404 Not Found status code and an error message.
Otherwise, it responds with an HTTP 200 OK status code and the found Product object as a JSON object in the response body.
POST /products Endpoint:

post("/products") { ... }: Defines a POST route at the /products path.
val product = try { call.receive<Product>() } catch (e: ContentTransformationException) { ... }: Attempts to receive the request body and deserialize it into a Product object using call.receive<Product>().
Error Handling: If the request body is not valid JSON or cannot be deserialized into a Product, it catches the ContentTransformationException and responds with an HTTP 400 Bad Request status code and an error message.
val newId = nextId.getAndIncrement(): Generates a new unique ID for the product.
val newProduct = product.copy(id = newId): Creates a new Product object with the generated ID.
products[newId] = newProduct: Stores the new product in the products map.
call.respond(HttpStatusCode.Created, newProduct): Responds with an HTTP 201 Created status code and the newly created Product object as a JSON object in the response body. The Created status code indicates that a new resource has been successfully created.
How to Run:

Create a new Ktor project or add this code to your existing project.
Ensure you have the necessary dependencies in your build.gradle.kts.
Configure your main application to call the configureRouting() function. For example, in your Application.module() function:
Kotlin

fun Application.module() {
    configureRouting()
}
Run your Ktor application.
Testing the Endpoints:

You can use tools like curl, Postman, or Insomnia to test the API endpoints:

GET /products:

Bash

curl http://localhost:8080/products
(Replace 8080 with the port your application is running on)
This should return an empty JSON array initially or an array of products if you've added any.

GET /products/1:

Bash

curl http://localhost:8080/products/1
This should return the product with ID 1 (if it exists) as a JSON object.

POST /products:

Bash

curl -X POST -H "Content-Type: application/json" -d '{"name": "New Product", "price": 19.99}' http://localhost:8080/products
This will create a new product and return the created product with its assigned ID in the JSON response.

Remember to replace the in-memory products map with a proper database integration for a production application.