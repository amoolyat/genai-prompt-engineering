Prompt:
Example:
Input: A Python script that reads a CSV and calculates a column average  
Output: Refactored version with error handling, clearer logic, and function documentation

Analyze the Python utility script for logic or design flaws, and refactor it for better readability and safety.

`import csv
def read_csv(filepath):
    with open(filepath, 'r') as f:
        return [row for row in csv.reader(f)]

def summarize_column(data, index):
    values = [float(row[index]) for row in data[1:]]  # skip header
    total = sum(values)
    avg = total / len(values)
    return total, avg

def main():
    filepath = 'data.csv'
    data = read_csv(filepath)
    total, avg = summarize_column(data, 1)
    print("Total:", total)
    print("Average:", avg)

if __name__ == '__main__':
    main()`

---

Model Output:
import csv
import os

def read_csv(filepath):
    """Read a CSV file and return a list of rows."""
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"File not found: {filepath}")
    with open(filepath, 'r', newline='') as f:
        return list(csv.reader(f))

def summarize_column(data, index):
    """Summarize numeric values in the specified column index (skipping the header)."""
    try:
        values = [float(row[index]) for row in data[1:] if row[index]]
        total = sum(values)
        avg = total / len(values)
        return total, avg
    except (ValueError, IndexError) as e:
        raise ValueError(f"Failed to process column {index}: {e}")

def main():
    filepath = 'data.csv'
    try:
        data = read_csv(filepath)
        total, avg = summarize_column(data, 1)
        print(f"Total: {total}")
        print(f"Average: {avg}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == '__main__':
    main()
